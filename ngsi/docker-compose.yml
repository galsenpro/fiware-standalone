#Docker Compose FIWARE BACKEND MANAGEMENT
version: "3"

# networks:
#   ngsi:
#   host:
#     driver: overlay
#     attachable: true

services:

  mongo:
    image: mongo:3.4
    #hostname: mongo
    #container_name: mongo
    command: --nojournal
    expose:
      - "27017"
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongodb:/data/db
    # networks:
    #   bridge:
    #     ipv4_address: 172.17.0.6

  orion:
    image: fiware/orion:1.12.0
    #image: orion
    #hostname: orion
    #container_name: f-orion
    #links:
    #   - mongo
    #   - cygnus
    #   - ngsiproxy
    ports:
      - "1026:1026"
    command: -dbhost mongo
    # networks:
    #   bridge:
    #     ipv4_address: 172.17.0.5


  mosquitto:
      image: eclipse-mosquitto
      #hostname: mosquitto
      #container_name: f-mosquitto
      volumes:
        - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
        - ./mosquitto/certs/:/etc/mosquitto/certs/
      expose:
        - "8083"
      ports:
        - "8083:1883"
        - "8084:8883"

  idasJSON
      #image: fiware/iotagent-json
      # l'image fiware/iotagent-json ne fonctionne pas bien il faut la builder à partir du repo "agaldemas"
      image: iotagent-json
      #hostname: idasjson
      #container_name: f-idasJSON
      depends_on:
           - mongo
           - orion
           - mosquitto
      expose:
          - "7896"
          - "4041"
      ports:
          - "7896:7896"
          - "4041:4041"
      volumes:
          - ./iotagentjson/config.js:/opt/iotajson/config.js

  idasUL:
      image: fiware/iotagent-ul
      #image: iotagent-ul
      #hostname: idasul
      #container_name: f-idasUL
      depends_on:
           - mongo
           - orion
           - mosquitto
      expose:
          - "7897"
          - "4042"
      ports:
          - "7897:7896"
          - "4042:4041"
      volumes:
          - ./iotagentul/config-blank.js:/opt/iotaul/config-blank.js

  mysql:
      image: mysql:5.5
      #hostname: mysql
      #container_name: mysql
      expose:
          - "3306"
      ports:
          - "3306:3306"
      environment:
          - MYSQL_ROOT_PASSWORD=mysql


  postgres:
      image: postgres:latest
      hostname: postgres
      #container_name: f-postgres
      restart: always
      expose:
          - "5432"
      ports:
          - "5432:5432"
      volumes:
          - ./postgres-data:/var/lib/postgresql/data
      environment:
         - POSTGRES_DB=test
         - POSTGRES_USER=postgres
         - POSTGRES_PASSWORD=postgres

  perseo-core:
      image: telefonicaiot/perseo-core
      #hostname: perseo-core
      #container_name: f-perseocore
      # expose:
      #     - "8090"
      # ports:
      #     - "8090:8080"
      environment:
        # ne sert à rien vu que cela se mord la queue avec la property perseo-fe-url.
          - PERSEO_FE_URL=perseo-fe:9090
      volumes:
          #- ./perseo-core/perseo_core-entrypoint.sh:/opt/perseo-core/perseo_core-entrypoint.sh
          # changé directement ds properties pour test
          - ./perseo-core/etc/perseo-core.properties:/etc/perseo-core.properties


  cygnus:
      #image: fiware/cygnus-ngsi
      image: telefonicaiot/fiware-cygnus:latest
      #hostname: cygnus
      #container_name: f-cygnus
      # links:
      #     - mysql:iot-mysql
      #     - mongo
      #     - postgres
      expose:
          - "5050"
          - "8082"
      ports:
          - "5050:5050"
          - "8082:8081"
      environment:
          - CYGNUS_MYSQL_USER=root
          - CYGNUS_MYSQL_PASS=mysql
          - CYGNUS_MONGO_USER=
          - CYGNUS_MONGO_PASS=
          #- CYGNUS_LOG_LEVEL=DEBUG
      volumes:
         - ./cygnus/agent.conf:/opt/apache-flume/conf/agent.conf

  comet:
      image: fiware/sth-comet:latest
      #hostname: comet
      #container_name: f-comet
      links:
        - mongo
      expose:
          - "8666"
      ports:
          - "8666:8666"
      environment:
          - STH_HOST=0.0.0.0
          - DB_URI=mongo:27017


  ### AUTHENTIFICATION

  authzforce:
      image: fiware/authzforce-ce-server:release-5.4.1
      #hostname: authzforce
      #container_name: f-authzforce
      # expose:
      #     - "8080"

  keyrock:
      # can be built from local dockerfile
      build: keyrock/.
      #image: fiware/idm:latest
      #image: keystone
      image: keystone
      #hostname: keyrock
      #container_name: f-keyrock
      links:
          - postgres
          - authzforce
      expose:
          - "5000"
          - "8000"
          - "35357"
      ports:
          - "5000:5000"
          - "8000:8000"
          - "35357:35357"
      volumes:
          #- ./keystone:/keystone
          - ./keyrock/keystone.conf:/keystone/etc/keystone.conf
      environment:
          - IDM_PASS=idm


  pep-proxy:
      #Proxy Authentification ORION
      image: fiware/pep-proxy
      #:5.3.1
      #hostname: pep-proxy
      #container_name: pep_proxy
      expose:
          - "8081"
      ports:
          - "8081:8081"
      volumes:
          - ./pepproxy/config.js:/opt/fiware-pep-proxy/config.js

  horizon:
      # from localbuild with fiware-idm TODO review include build from here

      image: horizon
      links:
          - keyrock:keystone
      expose:
          - "8001"
      ports:
          - "8001:8000"
      # environment:
      #    - OPENSTACK_HOST=keystone
      volumes:
        - ./horizon-conf/local_settings.py:/horizon/openstack_dashboard/local/local_settings.py

  os-horizon:
      build: ./docker-openstack-horizon
      image: openstack-horizon
      links:
          - keyrock:keystone
      expose:
          - "8002"
      ports:
          - "8002:80"
      #volumes:
      #    - ./os-horizon-conf/local_settings.py:/opt/horizon/openstack_dashboard/local/local_settings.py


  #pepproxy2:
  #    #Proxy Authentification IDAS
  #    image: fiware/pep-proxy:latest
  #    #hostname: pepproxy2
  #    #container_name: f-FIWARE_pepproxy2
  #    expose:
  #        - "8081"
  #    ports:
  #        - "8082:8081"
  #    volumes:
  #        - "/root/FIWARE/NGSI/pepproxy/config2.js:/opt/pep-proxy/config.js"

  perseo-fe:
      image: telefonicaiot/perseo-fe
      #image: perseo-fe
      #hostname: perseo-fe
      #container_name: f-perseo-fe
      restart: on-failure
      links:
           - perseo-core
           - mongo
      expose:
          - "9090"
      ports:
          - "9090:9090"
      environment:
          #- PERSEO_MONGO_HOST=mongo
          - PERSEO_CORE_URL=http://perseo-core:8080
          #- PERSEO_ORION_URL=http://orion:1026/v2/entities
          #- PERSEO_MONGO_HOST=mongodb://mongo:27017
      volumes:
          - ./perseo/config.js:/opt/perseo-fe/config.js

  nginx:
      image: nginx:latest
      #container_name: f-nginx
      ports:
          - "80:80"
      volumes:
          - ./wc/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
          - ./wc/static:/var/www/static:ro
  #    volumes_from:
  #        - wirecloud
      links:
           - wirecloud:wirecloud

  ngsiproxy:
      image: fiware/ngsiproxy
      #hostname: ngsiproxy
      #container_name: f-ngsiproxy
      #links:
      #  - orion
      expose:
        - "3000"
      ports:
        - "3000:3000"

  wirecloud:
      image: fiware/wirecloud:latest-composable
      #hostname: wirecloud
      #container_name: f-wirecloud
      depends_on:
         - postgres
         - ngsiproxy
         - orion
      expose:
        - "8100"
      ports:
        - "8100:8000"
      volumes:
        - ./wc/wirecloud_instance:/opt/wirecloud_instance
        - ./wc/static:/var/www/static

  node-red:
    image: nodered/node-red-docker
    expose:
      - "1880"
    ports:
      - "1880:1880"
    volumes:
      - ./nodered:/data

  # knowagedb:
  #   image: mysql:5.5
  #   environment:
  #       - MYSQL_USER=knowageuser
  #       - MYSQL_PASSWORD=knowagepassword
  #       - MYSQL_DATABASE=knowagedb
  #       - MYSQL_ROOT_PASSWORD=knowagerootpassword
  #   volumes:
  #       - ./data/mysql:/var/lib/mysql/
  #
  # knowage:
  #   image: knowagelabs/knowage-server-docker:develop
  #   links:
  #       - knowagedb:db
  #   expose:
  #     - "9080"
  #   ports:
  #       - "9080:8080"
  #   environment:
  #       - WAIT_MYSQL=true

#  device-simulator:
#    image: fiware/device-simulator
# networks:
#   bridge:
